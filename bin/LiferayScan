#!/usr/bin/env ruby
# This file is part of LiferayScan
# https://github.com/bcoles/LiferayScan

require 'LiferayScan'
require 'optparse'
require 'terminal-table'
require 'resolv'

def banner
  puts "
   _     _  __                     _____                 
  | |   (_)/ _|                   /  ___|                
  | |    _| |_ ___ _ __ __ _ _   _\\ `--.  ___ __ _ _ __  
  | |   | |  _/ _ \\ '__/ _` | | | |`--. \\/ __/ _` | '_ \\ 
  | |___| | ||  __/ | | (_| | |_| /\\__/ / (_| (_| | | | |
  \\_____/_|_| \\___|_|  \\__,_|\\__, \\____/ \\___\\__,_|_| |_|
                              __/ |                      
                             |___/             version 0.0.1"
  puts
  puts '-'*60
end

banner
options = {}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: LiferayScan <url> [options]"

  opts.on('-u URL', '--url URL', 'Liferay URL to scan') do |v|
    unless v.match(/\Ahttps?:\/\//)
      puts opts
      exit
    end
    options[:url] = v
  end

  opts.on('-s', '--skip', 'Skip check for Liferay') do
    options[:skip] = true
  end

  opts.on('-v', '--verbose', 'Enable verbose output') do
    options[:verbose] = true
  end

  opts.on('-h', '--help', 'Show this help') do 
    puts opts
    exit
  end
end

opts.parse!

$VERBOSE = true unless options[:verbose].nil?
@check = true unless options[:skip]

if options[:url].nil?
 puts opts
 exit
end

def scan(url)
  puts "Scan started at #{Time.now.getutc}"
  puts "URL: #{url}"

  # parse URL
  target = nil
  begin
    target = URI::parse(url.split('?').first)
  rescue
    puts "- Could not parse target URL: #{url}"
  end
  exit(1) if target.nil?

  # resolve IP address
  begin
    ip = Resolv.getaddress(target.host).to_s
    puts "IP: #{ip}" unless ip.nil?
  rescue
    puts "- Could not resolve hostname #{target.host}"
  end

  puts "Port: #{target.port}"
  puts '-'*60

  # check if Liferay
  if @check
    if LiferayScan::isLiferay(url)
      puts "+ Found Liferay Portal"
    else
      puts "- Liferay Portal not found"
      exit(1)
    end
  end

  # version
  version = LiferayScan::getVersion(url)
  puts "+ Version: #{version}" if version

  # language
  language = LiferayScan::getLanguage(url)
  puts "+ Language: #{language}" if language

  # organisation email address domain
  domain = LiferayScan::getOrganisationEmail(url)
  puts "+ Organisation Email: #{domain}" if domain

  # user registration enabled
  register = LiferayScan::userRegistration(url)
  puts "+ User registration is enabled" if register

  # SOAP API accessible
  soap_api = LiferayScan::remoteSoapApi(url)
  puts "+ Remote SOAP API is available" if soap_api

  # JSON API accessible
  json_api = LiferayScan::remoteJsonApi(url)
  puts "+ Remote JSON API is available" if json_api

  # check if Forgot Password uses CAPTCHA
  captcha = LiferayScan::usesCaptcha(url)
  puts "+ Password reset does not use CAPTCHA" unless captcha

  # users
  users = LiferayScan::enumerateUsers(url)
  unless users.empty?
    puts "+ Found users (#{users.length}):"
    table = Terminal::Table.new :headings => ['Screen Name', 'Full Name'], :rows => users
    puts table
  end

  # installed portlets
  portlets = LiferayScan::enumeratePortlets(url)
  puts "+ Found portlets (#{portlets.length}): #{portlets.join(', ')}" unless portlets.empty?

  puts "Scan finished at #{Time.now.getutc}"
  puts '-'*60
end

scan(options[:url])
